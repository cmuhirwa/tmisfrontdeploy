{"version":3,"sources":["containers/ChangePassword/ChangePassword.tsx"],"names":["FormErrorTypes","_ChangePassword","props","setLoading","status","setState","loading","Fn_ChangePassword","e","a","preventDefault","state","current_password","formError","target","CURRENT_PASSWORD","msg","new_password","NEW_PASSWORD","length","confirm_password","CONFIRM_PASSWORD","auth","user","object_request","user_id","setAxiosToken","axios","post","APP_URL","success","setTimeout","FC_PassCodeChanged","MAIN","errorToText","this","className","onClick","full_name","onSubmit","htmlFor","type","value","onChange","Component","ChangePassword","connect"],"mappings":"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","file":"static/js/45.1d19b156.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { MdLock } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, FC_PassCodeChanged, FT_PassCodeChanged } from \"../../actions\";\nimport DashboardContainer from \"../../components/DashboardContainer/DashboardContainer\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { APP_URL } from \"../../config/app.config\";\nimport { StoreState } from \"../../reducers\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText } from \"../../utils/errors\";\n\nenum FormErrorTypes {\n  MAIN = \"MAIN\",\n  CURRENT_PASSWORD = \"CURRENT_PASSWORD\",\n  NEW_PASSWORD = \"NEW_PASSWORD\",\n  CONFIRM_PASSWORD = \"CONFIRM_PASSWORD\",\n}\n\ninterface ChangePasswordProps {\n  auth: Auth;\n  // onSuccess: () => void;\n  FC_PassCodeChanged: FT_PassCodeChanged;\n}\ninterface ChangePasswordState {\n  loading: boolean;\n  current_password: string;\n  new_password: string;\n  confirm_password: string;\n  formError: { target: FormErrorTypes; msg: string } | null;\n  success: string;\n}\n\nexport class _ChangePassword extends Component<\n  ChangePasswordProps,\n  ChangePasswordState\n> {\n  constructor(props: ChangePasswordProps) {\n    super(props);\n    this.state = {\n      loading: false,\n      current_password: \"\",\n      new_password: \"\",\n      confirm_password: \"\",\n      formError: null,\n      success: \"\",\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  Fn_ChangePassword = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (this.state.current_password === \"\") {\n      return this.setState({\n        formError: {\n          target: FormErrorTypes.CURRENT_PASSWORD,\n          msg: \"Please fill current or existing password\",\n        },\n      });\n    }\n    if (this.state.new_password === \"\") {\n      return this.setState({\n        formError: {\n          target: FormErrorTypes.NEW_PASSWORD,\n          msg: \"Please fill new password\",\n        },\n      });\n    }\n    if (this.state.new_password.length < 5) {\n      return this.setState({\n        formError: {\n          target: FormErrorTypes.NEW_PASSWORD,\n          msg: \"Please password characters should not be less than 5\",\n        },\n      });\n    }\n\n    if (\n      this.state.new_password === \"12345\" ||\n      this.state.new_password === \"123456\"\n    ) {\n      return this.setState({\n        formError: {\n          target: FormErrorTypes.NEW_PASSWORD,\n          msg: \"Please choose a strong password\",\n        },\n      });\n    }\n\n    if (this.state.confirm_password === \"\") {\n      return this.setState({\n        formError: {\n          target: FormErrorTypes.CONFIRM_PASSWORD,\n          msg: \"Please confirm your new password\",\n        },\n      });\n    }\n    if (this.state.confirm_password !== this.state.new_password) {\n      return this.setState({\n        formError: {\n          target: FormErrorTypes.CONFIRM_PASSWORD,\n          msg: \"Password does not match with new password\",\n        },\n      });\n    }\n    if (this.props.auth.user !== null) {\n      let object_request = {\n        user_id: this.props.auth.user?.user_id,\n        current_password: this.state.current_password,\n        new_password: this.state.new_password,\n      };\n      this.setLoading(true);\n      setAxiosToken();\n      try {\n        const res = await axios.post(\n          `${APP_URL}/changepassword/new`,\n          object_request\n        );\n        // console.log(\"status: \", res.status);\n        if (res) {\n          this.setState({\n            current_password: \"\",\n            new_password: \"\",\n            confirm_password: \"\",\n            formError: null,\n            success: \"Password changed successfully!\",\n          });\n\n          setTimeout(() => {\n            // this.props.onSuccess();\n            this.props.FC_PassCodeChanged(false);\n          }, 1400);\n        }\n        this.setLoading(false);\n      } catch (error: any) {\n        this.setState({\n          formError: {\n            target: FormErrorTypes.MAIN,\n            msg: errorToText(error),\n          },\n          success: \"\",\n          loading: false,\n        });\n      }\n    }\n  };\n\n  render() {\n    if (this.state.loading === true) {\n      return (\n        <div className=\"bg-white rounded-md p-4 flex flex-col items-center justify-center m-5\">\n          <Loading />\n          <div className=\"text-xl\">Loading, please wait...</div>\n        </div>\n      );\n    }\n\n    if (this.state.success !== \"\")\n      return (\n        <DashboardContainer>\n          <div\n            onClick={() => this.setState({ success: \"\" })}\n            className=\"bg-green-100 text-center py-4 text-green-800 rounded px-3 cursor-pointer animate__animated animate__zomIn \"\n          >\n            <b className=\"text-lg\">\n              {this.state.success} Password changed successfully\n            </b>\n          </div>\n        </DashboardContainer>\n      );\n\n    return (\n      <div>\n        <DashboardContainer>\n          <div className=\"flex flex-col\">\n            <span className=\"text-3xl font-bold -mb-1\">Change password</span>\n            <span className=\"text-primary-800 font-bold\">\n              {this.props.auth.user?.full_name}\n            </span>\n          </div>\n\n          {this.state.formError !== null &&\n            this.state.formError.target === FormErrorTypes.MAIN && (\n              <div\n                onClick={() => this.setState({ formError: null })}\n                className=\"bg-red-100 text-red-800 rounded px-3 py-2 cursor-pointer\"\n              >\n                {this.state.formError.msg}\n              </div>\n            )}\n          <div className=\"mt-5\">\n            <form onSubmit={this.Fn_ChangePassword}>\n              <div className=\"flex flex-col\">\n                <label className=\"text-base\" htmlFor=\"\">\n                  Current password\n                </label>\n                <input\n                  type=\"password\"\n                  value={this.state.current_password}\n                  onChange={(e) =>\n                    this.setState({\n                      formError: null,\n                      current_password: e.target.value,\n                    })\n                  }\n                  className={`border ${\n                    this.state.formError?.target ===\n                    FormErrorTypes.CURRENT_PASSWORD\n                      ? \"border-red-600 animate__animated animate__shakeX animate__faster\"\n                      : \"border-gray-400\"\n                  }  rounded px-3 py-2`}\n                />\n                {this.state.formError?.target ===\n                  FormErrorTypes.CURRENT_PASSWORD && (\n                  <span className=\"text-red-600 font-bold\">\n                    {this.state.formError.msg}\n                  </span>\n                )}\n              </div>\n              <div className=\"flex flex-col mt-3\">\n                <label className=\"text-base\" htmlFor=\"\">\n                  New password\n                </label>\n                <input\n                  type=\"password\"\n                  value={this.state.new_password}\n                  onChange={(e) =>\n                    this.setState({\n                      formError: null,\n                      new_password: e.target.value,\n                    })\n                  }\n                  className={`border ${\n                    this.state.formError?.target === FormErrorTypes.NEW_PASSWORD\n                      ? \"border-red-600 animate__animated animate__shakeX animate__faster\"\n                      : \"border-gray-400\"\n                  }  rounded px-3 py-2`}\n                />\n                {this.state.formError?.target ===\n                  FormErrorTypes.NEW_PASSWORD && (\n                  <span className=\"text-red-600 font-bold\">\n                    {this.state.formError.msg}\n                  </span>\n                )}\n              </div>\n              <div className=\"flex flex-col mt-3\">\n                <label className=\"text-base\" htmlFor=\"\">\n                  Confirm password\n                </label>\n                <input\n                  type=\"password\"\n                  value={this.state.confirm_password}\n                  onChange={(e) =>\n                    this.setState({\n                      formError: null,\n                      confirm_password: e.target.value,\n                    })\n                  }\n                  className={`border ${\n                    this.state.formError?.target ===\n                    FormErrorTypes.CONFIRM_PASSWORD\n                      ? \"border-red-600 animate__animated animate__shakeX animate__faster\"\n                      : \"border-gray-400\"\n                  }  rounded px-3 py-2`}\n                />\n                {this.state.formError?.target ===\n                  FormErrorTypes.CONFIRM_PASSWORD && (\n                  <span className=\"text-red-600 font-bold\">\n                    {this.state.formError.msg}\n                  </span>\n                )}\n              </div>\n              <div className=\"my-4\">\n                <button\n                  className=\"cursor-pointer bg-primary-800 text-white rounded px-3 py-2 hover:bg-blue-900\"\n                  type=\"submit\"\n                >\n                  Change password\n                </button>\n              </div>\n            </form>\n          </div>\n        </DashboardContainer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n}: StoreState): {\n  auth: Auth;\n} => {\n  return { auth: auth };\n};\n\nexport const ChangePassword = connect(mapStateToProps, { FC_PassCodeChanged })(\n  _ChangePassword\n);\n"],"sourceRoot":""}