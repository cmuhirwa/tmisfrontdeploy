{"version":3,"sources":["components/Inputs/InputSelect.tsx","containers/PlacementPlacementSummaryREB/PlacementPlacementSummaryREB.tsx"],"names":["InputSelect","onChange","value","error","label","placeholder","disabled","name","Input_className","Label_className","InputContainer_className","MainContainer_className","size","data","className","htmlFor","InputSize","map","level","i","title","PlacementPlacementSummaryREB","connect","auth","useState","loading","setLoading","MONTHS_LIST","Date","getMonth","month","setMonth","setError","district_total_summary","pla_district_total_summary","setData","useEffect","FC_GetNonReportedPlacementReport","status","err","TotalSchools","TotalPercentage","TotalReported","totalNonSubmittedNumberSum","el","target","theme","colSpan","length","itm","foundPlacement","find","district_code","Total","total","Reported","percentageNumber","percentage","totalNonSubmittedNumber","district_name"],"mappings":"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","file":"static/js/32.1dd0dada.chunk.js","sourcesContent":["import React, { ChangeEvent, FC, ReactElement } from \"react\";\nimport { InputSize, InputSizeType } from \"./InputTypes\";\n\ntype InputSelectProps = {\n  onChange: (event: ChangeEvent<HTMLSelectElement>) => void;\n  value: string | number;\n  error: string;\n  label: string;\n  placeholder: string;\n  disabled?: boolean;\n  name: string;\n  className?: string;\n  size?: InputSizeType;\n  Input_className?: string;\n  Label_className?: string;\n  InputContainer_className?: string;\n  MainContainer_className?: string;\n  data: { title: string; value: string | number }[];\n};\n\nconst InputSelect: FC<InputSelectProps> = ({\n  onChange,\n  value,\n  error,\n  label,\n  placeholder,\n  disabled = false,\n  name,\n  Input_className = \"\",\n  Label_className = \"\",\n  InputContainer_className = \"\",\n  MainContainer_className = \"\",\n  size = \"md\",\n  data,\n}): ReactElement => {\n  /* function body */\n  return (\n    <>\n      <div className={`w-full my-2 ${MainContainer_className}`}>\n        {label && (\n          <label\n            htmlFor=\"login-form-email\"\n            className={`text-primary-900 dark:text-primary-100 ${Label_className}`}\n          >\n            {label}\n          </label>\n        )}\n        <div className={`rounded relative ${InputContainer_className}`}>\n          <select\n            name={name}\n            placeholder={placeholder}\n            onChange={onChange}\n            className={`\n                     w-full text-lg rounded border-2 \n                     ${InputSize(size)}\n                     ${\n                       error !== \"\"\n                         ? \"border-red-500 dark:text-white bg-red-100 dark:bg-red-900 dark:bg-opacity-30\"\n                         : \"border-primary-800 dark:text-white bg-white dark:bg-primary-900 \"\n                     }\n                     px-3 ${Input_className}`}\n            value={value}\n            disabled={disabled}\n            // className=\"p-2 border-2 bg-white border-primary-900 rounded w-full\"\n          >\n            {data.map((level, i) => (\n              <option key={i} value={level.value}>\n                {level.title}\n              </option>\n            ))}\n          </select>\n\n          {error !== \"\" && (\n            <p className=\"text-sm text-red-600 dark:text-red-500\">{error}</p>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\nexport default InputSelect;\n","import React, { FC, ReactElement, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  FC_GetNonReportedPlacementReport,\n  FC_GetNonReportedPlacement_Interface,\n} from \"../../actions\";\nimport Alert from \"../../components/Alert/Alert\";\nimport DashboardContainer from \"../../components/DashboardContainer/DashboardContainer\";\nimport Heading from \"../../components/Heading/Heading\";\nimport InputSelect from \"../../components/Inputs/InputSelect\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { StoreState } from \"../../reducers\";\nimport { MONTHS_LIST, percentage } from \"../../utils/functions\";\n\ntype PlacementPlacementSummaryREBProps = {\n  auth: Auth;\n};\n\nconst _PlacementPlacementSummaryREB: FC<PlacementPlacementSummaryREBProps> = ({\n  auth,\n}): ReactElement => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [month, setMonth] = useState<string>(\n    MONTHS_LIST[new Date().getMonth()]\n  );\n  const [error, setError] = useState<string>(\"\");\n  const [data, setData] = useState<FC_GetNonReportedPlacement_Interface>({\n    district_total_summary: [],\n    pla_district_total_summary: [],\n  });\n\n  useEffect(() => {\n    if (loading === true) {\n      FC_GetNonReportedPlacementReport(month, \"1\", (status, data, err) => {\n        if (data !== null) setData(data);\n        if (error !== \"\") setError(err);\n        setLoading(false);\n      });\n    }\n  }, [loading, month, error]);\n\n  let TotalSchools = 0;\n  let TotalPercentage = 0;\n  let TotalReported = 0;\n  let totalNonSubmittedNumberSum = 0;\n  /* function body */\n  return (\n    <DashboardContainer>\n      <div className=\"py-1 border-b flex items-center\">\n        <div className=\"flex-1\">\n          <Heading>Non Reported placement report</Heading>\n          <p className=\"text-gray-500\">\n            List of districts, with the reported and non reported {\"(\"}Placement\n            report{\")\"}\n          </p>\n        </div>\n\n        <div className=\"pr-2\">Register the stuff</div>\n\n        <div className=\"\">\n          <InputSelect\n            onChange={(el) => {\n              setMonth(el.target.value);\n              if (el.target.value !== month) setLoading(true);\n            }}\n            value={month}\n            error={\"\"}\n            label={\"Select month\"}\n            placeholder={\"Select month\"}\n            name={\"\"}\n            data={MONTHS_LIST.map((el) => ({\n              title: el,\n              value: el,\n            }))}\n          />\n        </div>\n      </div>\n\n      {error !== \"\" && <Alert theme=\"danger\">{error}</Alert>}\n\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"text-left\">\n            <th className=\"p-2 border\">#</th>\n            <th className=\"p-2 border\">District name</th>\n            <th className=\"p-2 border\">Total schools</th>\n            <th className=\"p-2 border\">Reported schools</th>\n            <th className=\"p-2 border\">Reported schools %</th>\n            <th className=\"p-2 border\">Non Reported schools</th>\n          </tr>\n        </thead>\n        <tbody>\n          {loading === true && (\n            <tr>\n              <td colSpan={8} className=\"py-8 text-center\">\n                <Loading />\n              </td>\n            </tr>\n          )}\n\n          {loading === false && data.district_total_summary.length === 0 && (\n            <tr>\n              <td colSpan={8} className=\"py-8 text-center\">\n                <h2 className=\"text-2xl\">No placement found!</h2>\n                <p>No placement found!</p>\n              </td>\n            </tr>\n          )}\n          {data.district_total_summary.map((itm, i) => {\n            let foundPlacement = data.pla_district_total_summary.find(\n              (el) => el.district_code === itm.district_code\n            );\n\n            let Total = +itm.total;\n            let Reported = foundPlacement ? foundPlacement.total : 0;\n            let percentageNumber = percentage(+Reported, +itm.total);\n            let totalNonSubmittedNumber = foundPlacement\n              ? +itm.total - +foundPlacement.total\n              : itm.total;\n            //\n            TotalSchools = TotalSchools + Total;\n            TotalReported = +TotalReported + +Reported;\n            TotalPercentage = +TotalPercentage + +percentageNumber;\n            totalNonSubmittedNumberSum =\n              +totalNonSubmittedNumberSum + +totalNonSubmittedNumber;\n            return (\n              <tr>\n                <td className=\"border p-2\">{i + 1}</td>\n                <td className=\"border p-2\">{itm.district_name}</td>\n                <td className=\"border p-2\">{itm.total}</td>\n                <td className=\"border p-2\">{Reported}</td>\n                <td\n                  className={`border p-2 font-bold  ${\n                    percentageNumber === 100\n                      ? \"text-green-900 bg-green-50\"\n                      : \"text-blue-800\"\n                  }`}\n                >\n                  {percentageNumber}%\n                </td>\n                <td className=\"border p-2 text-red-800 font-bold\">\n                  {totalNonSubmittedNumber}\n                </td>\n              </tr>\n            );\n          })}\n\n          {data.district_total_summary.length >= 1 && (\n            <tr>\n              <td className=\"border p-2\" colSpan={2}></td>\n              <td className=\"border p-2\">{TotalSchools}</td>\n              <td className=\"border p-2\">{TotalReported}</td>\n              <td className=\"border p-2 font-bold text-blue\">\n                {percentage(+TotalReported, +TotalSchools)}%\n              </td>\n              <td className=\"border p-2 font-bold text-red-800\">\n                {totalNonSubmittedNumberSum}\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </DashboardContainer>\n  );\n};\n\nconst mapStateToProps = ({ auth }: StoreState): { auth: Auth } => {\n  return { auth: auth };\n};\n\nexport const PlacementPlacementSummaryREB = connect(\n  mapStateToProps,\n  {}\n)(_PlacementPlacementSummaryREB);\n"],"sourceRoot":""}