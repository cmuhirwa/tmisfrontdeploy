{"version":3,"sources":["trainingModule/TrainingsList/RebTrainingList.tsx"],"names":["defaultAlert","target","msg","_RebTrainingList","props","selectTrainingToEdit","id","setState","selected_training_edit","clearError","setTimeout","alert","createTrainingDraft","window","confirm","loading_create_training_draft","FC_CreateTrainingDraft","auth","stakeholder","development_partner_id","status","data","err","trainings","state","deleteTraining","delete_training","toString","FC_DeleteTraining","filter","el","getTrainingStatus","loading","selected_status","FC_GetListOfTrainingsByStatus","selected_training_details","ImplementationStatusTraining","READY_FOR_EVALUATION","this","training_id","close","deleteUpdate","editTraining","rebPreview","theme","fixed","className","size","onChange","e","value","error","label","placeholder","name","title","COMPLETED","DRAFT","INPROGRESS","length","colSpan","map","training","i","viewDetails","update_loading","delete_loading","React","Component","RebTrainingList","connect"],"mappings":"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","file":"static/js/81.3f72cfbf.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaChalkboardTeacher } from \"react-icons/fa\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  FC_CreateTrainingDraft,\n  FC_DeleteTraining,\n  FC_GetListOfTrainingsByStatus,\n  ImplementationStatusTraining,\n  TrainingsItem,\n} from \"../../actions\";\nimport Alert from \"../../components/Alert/Alert\";\nimport DashboardContainer from \"../../components/DashboardContainer/DashboardContainer\";\nimport Heading from \"../../components/Heading/Heading\";\nimport InputSelect from \"../../components/Inputs/InputSelect\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { StoreState } from \"../../reducers\";\nimport { RequestTraining } from \"../RequestTraining/RequestTraining\";\nimport { TrainingDetails } from \"../TrainingDetails/TrainingDetails\";\nimport TrainingListItem from \"./TrainingListItem\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n}\n\ninterface AppState {\n  loading: boolean;\n  alert: {\n    target: \"MAIN-ERROR\" | \"MAIN-SUCCESS\" | null;\n    msg: string;\n  };\n  selected_training_edit: string | null;\n  selected_training_details: string | null;\n  trainings: TrainingsItem[];\n  loading_create_training_draft: boolean;\n  delete_training: null | string;\n  selected_status: ImplementationStatusTraining;\n}\n\nconst defaultAlert = {\n  target: null,\n  msg: \"\",\n};\n\nclass _RebTrainingList extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      alert: defaultAlert,\n      selected_training_edit: null,\n      selected_training_details: null,\n      trainings: [],\n      loading_create_training_draft: false,\n      delete_training: null,\n      selected_status: ImplementationStatusTraining.READY_FOR_EVALUATION,\n    };\n  }\n\n  componentDidMount(): void {\n    if (!this.props.auth.stakeholder?.development_partner_id)\n      return this.setState({\n        loading: false,\n        alert: {\n          msg: \"No Training institution assigned to you\",\n          target: \"MAIN-ERROR\",\n        },\n      });\n\n    this.getTrainingStatus(ImplementationStatusTraining.READY_FOR_EVALUATION);\n  }\n\n  selectTrainingToEdit = (id: string) => {\n    this.setState({ selected_training_edit: id });\n  };\n\n  clearError = () =>\n    setTimeout(() => {\n      this.setState({\n        alert: defaultAlert,\n      });\n    }, 3000);\n\n  createTrainingDraft = () => {\n    if (\n      !window.confirm(\n        \"Are you sure you want to request for training application?\"\n      )\n    )\n      return;\n\n    this.setState({ loading_create_training_draft: true });\n    FC_CreateTrainingDraft(\n      this.props.auth.stakeholder?.development_partner_id + \"\",\n      (status, data, err) => {\n        this.setState({\n          loading_create_training_draft: false,\n          trainings:\n            status && data\n              ? [data, ...this.state.trainings]\n              : this.state.trainings,\n          selected_training_edit:\n            status && data ? data.id : this.state.selected_training_edit,\n          alert: status\n            ? defaultAlert\n            : {\n                target: \"MAIN-ERROR\",\n                msg: `Error: ${err}`,\n              },\n        });\n        this.clearError();\n      }\n    );\n  };\n\n  deleteTraining = (id: string | number) => {\n    if (!window.confirm(\"Are you sure you want to delete the training?\"))\n      return;\n    this.setState({\n      delete_training: id.toString(),\n    });\n    FC_DeleteTraining(id.toString(), (status, err) => {\n      this.setState({\n        delete_training: null,\n        trainings: status\n          ? this.state.trainings.filter(\n              (el) => el.id.toString() !== id.toString()\n            )\n          : this.state.trainings,\n        alert: status\n          ? {\n              target: \"MAIN-SUCCESS\",\n              msg: \"Training has been deleted successfully!\",\n            }\n          : {\n              target: \"MAIN-ERROR\",\n              msg: `Error: ${err}`,\n            },\n      });\n\n      this.clearError();\n    });\n  };\n\n  getTrainingStatus = (el: ImplementationStatusTraining) => {\n    this.setState({\n      loading: true,\n      selected_status: el,\n    });\n    FC_GetListOfTrainingsByStatus(el, (status, data, err) => {\n      this.setState({\n        loading: false,\n        alert: status\n          ? defaultAlert\n          : {\n              target: \"MAIN-ERROR\",\n              msg: err,\n            },\n        trainings: data,\n      });\n      this.clearError();\n    });\n  };\n\n  render() {\n    if (this.state.selected_training_edit !== null) {\n      return (\n        <RequestTraining\n          training_id={this.state.selected_training_edit}\n          close={() => this.setState({ selected_training_edit: null })}\n        />\n      );\n    }\n\n    if (this.state.selected_training_details !== null)\n      return (\n        <TrainingDetails\n          deleteUpdate={() => {}}\n          training_id={this.state.selected_training_details}\n          close={() => this.setState({ selected_training_details: null })}\n          editTraining={(id) => {}}\n          rebPreview\n        />\n      );\n\n    return (\n      <>\n        {this.state.alert.target === \"MAIN-ERROR\" && (\n          <Alert theme=\"danger\" fixed>\n            {this.state.alert.msg}\n          </Alert>\n        )}\n        {this.state.alert.target === \"MAIN-SUCCESS\" && (\n          <Alert theme=\"success\" fixed>\n            {this.state.alert.msg}\n          </Alert>\n        )}\n        <div className=\"lg:sticky top-3 z-50 mb-4\">\n          <DashboardContainer>\n            <div className=\"flex w-full items-center py-2\">\n              <div className=\"pr-4 text-4xl\">\n                <FaChalkboardTeacher />\n              </div>\n              <div className=\"flex-1\">\n                <Heading size=\"md\">Review Training applications</Heading>\n                <p className=\"text-gray-600 text-sm\">Training institution</p>\n              </div>\n              <div className=\"pr-2 \">\n                <InputSelect\n                  onChange={(e) =>\n                    this.getTrainingStatus(\n                      e.target.value as ImplementationStatusTraining\n                    )\n                  }\n                  value={this.state.selected_status}\n                  error={\"\"}\n                  label={\"\"}\n                  placeholder={\"\"}\n                  name={\"\"}\n                  data={[\n                    {\n                      title: \"READY FOR EVALUATION\",\n                      value: ImplementationStatusTraining.READY_FOR_EVALUATION,\n                    },\n                    {\n                      title: \"COMPLETED\",\n                      value: ImplementationStatusTraining.COMPLETED,\n                    },\n                    {\n                      title: \"DRAFT\",\n                      value: ImplementationStatusTraining.DRAFT,\n                    },\n                    {\n                      title: \"INPROGRESS\",\n                      value: ImplementationStatusTraining.INPROGRESS,\n                    },\n                  ]}\n                />\n              </div>\n              <div className=\"p-1 text-center bg-blue-100 text-blue-800 px-4 rounded-lg\">\n                <section className=\"text-sm opacity-50\">Total</section>\n                <h2 className=\"font-bold text-xl\">\n                  {this.state.trainings.length}\n                </h2>\n              </div>\n            </div>\n          </DashboardContainer>\n        </div>\n\n        <div className=\"container mx-auto px-2\">\n          <div className=\"bg-white p-1\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"text-left  bg-yellow-100\">\n                  <th className=\"p-2 border\">#</th>\n                  <th className=\"p-2 border\">Title</th>\n                  <th className=\"p-2 border\">Training institution</th>\n                  <th className=\"p-2 border\">Area of intervention</th>\n                  <th className=\"p-2 border\">Start date</th>\n                  <th className=\"p-2 border\">End date</th>\n                  <th className=\"p-2 border w-5\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td colSpan={10}>\n                    {this.state.loading === true && (\n                      <div className=\"mx-auto py-6 text-center\">\n                        <div className=\"inline\">\n                          <Loading />\n                        </div>\n                      </div>\n                    )}\n                    {this.state.trainings.length <= 0 &&\n                      this.state.loading === false && (\n                        <div className=\"mx-auto py-8 text-center opacity-50\">\n                          <h1 className=\"text-9xl text-center mx-auto\">\n                            <FaChalkboardTeacher className=\"inline\" />\n                          </h1>\n                          <h2 className=\"text-2xl font-bold\">\n                            No Training requests found\n                          </h2>\n                        </div>\n                      )}\n                  </td>\n                </tr>\n                {this.state.trainings.map((training, i) => (\n                  <TrainingListItem\n                    key={i}\n                    i={i}\n                    training={training}\n                    viewDetails={(id) =>\n                      this.setState({\n                        selected_training_details: id.toString(),\n                      })\n                    }\n                    deleteTraining={this.deleteTraining}\n                    update_loading={null}\n                    editTraining={(id) =>\n                      this.setState({ selected_training_edit: id.toString() })\n                    }\n                    delete_loading={this.state.delete_training}\n                  />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: StoreState): { auth: Auth } => {\n  return { auth: auth };\n};\n\nexport const RebTrainingList = connect(mapStateToProps, {})(_RebTrainingList);\n"],"sourceRoot":""}