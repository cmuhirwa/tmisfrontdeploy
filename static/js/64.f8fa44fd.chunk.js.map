{"version":3,"sources":["containers/TransfersReportsCOUNRTY/IncomingTransferReport.tsx"],"names":["defaultError","error","target","_IncomingTransferReport","props","state","loading_district","districts","selected_district","district","this","setState","FC_GetDistricts","status","data","msg","console","log","className","onClick","selectDistrict","bind","district_name","district_code","hideActions","length","map","el","React","Component","IncomingTransferReport","connect","auth"],"mappings":"0RA0BMA,EAA0B,CAC9BC,MAAO,GACPC,OAAQ,MAUJC,E,kDACJ,WAAYC,GAAkB,IAAD,8BAC3B,cAAMA,IAEDC,MAAQ,CACXC,kBAAkB,EAClBC,UAAW,GACXN,MAAOD,EACPQ,kBAAmB,MAPM,CAS5B,C,kDAED,SAAeC,GACbC,KAAKC,SAAS,CACZH,kBAAmBC,GAEtB,G,+BAED,WAA2B,IAAD,OACxBC,KAAKC,SAAS,CACZL,kBAAkB,EAClBL,MAAOD,IAETY,aAAgB,SAACC,EAAQC,EAAMC,GAC7BC,QAAQC,IAAI,CAAEJ,SAAQC,OAAMC,QAEf,OAATD,EACF,EAAKH,SAAS,CACZL,kBAAkB,EAClBC,UAAWO,IAGb,EAAKH,SAAS,CACZL,kBAAkB,EAClBC,UAAW,GACXN,MAAO,CACLC,OAAQ,aACRD,MAAM,UAAD,OAAYc,KAIxB,GACF,G,oBAED,WAAU,IAAD,OACP,OAAqC,OAAjCL,KAAKL,MAAMG,kBAEX,qCACE,qBAAKU,UAAU,4BAAf,SACE,eAAC,IAAD,CAAoBA,UAAU,OAA9B,UACE,kCACE,cAAC,IAAD,CAAQC,QAAST,KAAKU,eAAeC,KAAKX,KAAM,MAAhD,oBAIF,0BAASQ,UAAU,uBAAnB,UACGR,KAAKL,MAAMG,kBAAkBc,cADhC,oBAKJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,cAAeb,KAAKL,MAAMG,kBAAkBe,cAC5CD,cACEZ,KAAKL,MAAMG,kBAAkBc,cAAgB,YAE/CE,aAAW,SAMnB,qCACE,cAAC,IAAD,UACE,sBAAKN,UAAU,cAAf,UACE,yBAASA,UAAU,SAAnB,SACE,cAAC,IAAD,mCAEF,iCAIJ,cAAC,IAAD,WACmC,IAAhCR,KAAKL,MAAMC,iBACV,qBAAKY,UAAU,mBAAf,SACE,cAAC,IAAD,MAEgC,IAAhCR,KAAKL,MAAME,UAAUkB,OACvB,qBAAKP,UAAU,mBAAf,SACE,cAAC,IAAD,iCAGF,qBAAKA,UAAU,sCAAf,SACGR,KAAKL,MAAME,UAAUmB,KAAI,SAACC,GAAD,OACxB,sBACER,QAAS,EAAKC,eAAeC,KAAK,EAAMM,GAExCT,UAAU,qJAHZ,UAKE,oBAAIA,UAAU,iBAAd,SAAgCS,EAAGL,gBACnC,yBAASJ,UAAU,2BAAnB,SACE,cAAC,IAAD,QALGS,EAAGJ,cAHc,UAiBrC,K,GA9GmCK,IAAMC,WAqH/BC,EAAyBC,aAJd,SAAC,GACvB,MAAO,CAAEC,KADuD,EAAvCA,KAE1B,GAIC,CAAC,EAFmCD,CAGpC5B,E","file":"static/js/64.f8fa44fd.chunk.js","sourcesContent":["import React from \"react\";\nimport { MdArrowForward } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth } from \"../../actions\";\nimport { FC_GetDistricts } from \"../../actions/transfer.action\";\nimport Button from \"../../components/Buttons/Button\";\nimport DashboardContainer from \"../../components/DashboardContainer/DashboardContainer\";\nimport Heading from \"../../components/Heading/Heading\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { StoreState } from \"../../reducers\";\nimport { DistrictTypes } from \"../../types/TransferTypes\";\n// import { InternalTransfer } from \"../InternalTransfer/InternalTransfer\";\n// import { OutgoingTransfers } from \"../OutgoingTransfers/OutgoingTransfers\";\nimport TransferRequests from \"../Trensfer/Dde/TransferRequests\";\n// import Alert, { AlertInterface } from \"../../components/Alert/Alert\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n}\n\ninterface ErrorType {\n  target: \"MAIN-ERROR\" | \"MAIN-SUCCESS\" | null;\n  error: string;\n}\n\nconst defaultError: ErrorType = {\n  error: \"\",\n  target: null,\n};\n\ninterface AppState {\n  loading_district: boolean;\n  districts: DistrictTypes[];\n  error: ErrorType;\n  selected_district: DistrictTypes | null;\n}\n\nclass _IncomingTransferReport extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading_district: false,\n      districts: [],\n      error: defaultError,\n      selected_district: null,\n    };\n  }\n\n  selectDistrict(district: DistrictTypes | null) {\n    this.setState({\n      selected_district: district,\n    });\n  }\n\n  componentDidMount(): void {\n    this.setState({\n      loading_district: true,\n      error: defaultError,\n    });\n    FC_GetDistricts((status, data, msg) => {\n      console.log({ status, data, msg });\n\n      if (data !== null) {\n        this.setState({\n          loading_district: false,\n          districts: data,\n        });\n      } else {\n        this.setState({\n          loading_district: false,\n          districts: [],\n          error: {\n            target: \"MAIN-ERROR\",\n            error: `Error: ${msg}`,\n          },\n        });\n      }\n    });\n  }\n\n  render() {\n    if (this.state.selected_district !== null)\n      return (\n        <>\n          <div className=\"sticky top-1 z-50 mx-auto\">\n            <DashboardContainer className=\"flex\">\n              <section>\n                <Button onClick={this.selectDistrict.bind(this, null)}>\n                  Back\n                </Button>\n              </section>\n              <section className=\"text-2xl pl-3 flex-1\">\n                {this.state.selected_district.district_name} district\n              </section>\n            </DashboardContainer>\n          </div>\n          <DashboardContainer>\n            <TransferRequests\n              district_code={this.state.selected_district.district_code}\n              district_name={\n                this.state.selected_district.district_name + \" district\"\n              }\n              hideActions\n            />\n          </DashboardContainer>\n        </>\n      );\n    return (\n      <>\n        <DashboardContainer>\n          <div className=\"w-full flex\">\n            <section className=\"flex-1\">\n              <Heading>Incoming transfers</Heading>\n            </section>\n            <section></section>\n          </div>\n        </DashboardContainer>\n\n        <DashboardContainer>\n          {this.state.loading_district === true ? (\n            <div className=\"py-8 text-center\">\n              <Loading />\n            </div>\n          ) : this.state.districts.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Heading>No results found</Heading>\n            </div>\n          ) : (\n            <div className=\"w-full lg:grid lg:grid-cols-2 gap-2\">\n              {this.state.districts.map((el) => (\n                <div\n                  onClick={this.selectDistrict.bind(this, el)}\n                  key={el.district_code}\n                  className=\"flex px-3 py-1 mb-3 lg:mb-0 hover:text-white hover:bg-yellow-600 hover:bg-opacity-50 rounded-md items-center bg-yellow-50 border-yellow-700 border\"\n                >\n                  <h4 className=\"flex-1 text-lg\">{el.district_name}</h4>\n                  <section className=\"text-2xl text-yellow-600\">\n                    <MdArrowForward />\n                  </section>\n                </div>\n              ))}\n            </div>\n          )}\n        </DashboardContainer>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: StoreState): { auth: Auth } => {\n  return { auth: auth };\n};\n\nexport const IncomingTransferReport = connect(\n  mapStateToProps,\n  {}\n)(_IncomingTransferReport);\n"],"sourceRoot":""}