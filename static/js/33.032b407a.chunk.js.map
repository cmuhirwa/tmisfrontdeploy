{"version":3,"sources":["actions/transfer.action.ts","containers/PermutationsReports/PermutationsReports.tsx"],"names":["FC_GetAllTransfers","callBack","dispatch","setAxiosToken","axios","get","APP_URL","res","console","log","getAllTransfers","needed_data","data","filter","item","requested_status","type","ActionTypes","GET_ALL_TRANSFER","payload","errorToText","FC_GetDistricts","district_code","district_name","FC_UploadFile","fileToUpload","number_percentage","formData","FormData","append","post","onUploadProgress","progressEvent","loaded","total","error","FC_UploadSignedDocument","selectedUserId","selectedFile","doc_title","UPLOAD_SIGNED_DOCUMENT","teacher_transfer_id","mayor_letter","_PermutationsReports","props","FilteredData","test","permutations","find","itm","page","state","undefined","permutations_data","setState","schools_selected","schools","componentDidMount","districts","loading","status","msg","auth","district","role","role_id","FC_GetPermutationsByDistrict","limit","setLoading","FC_GetNationalPermutations","FindUser","user_id","users","user","FindSchool","school_code","school","selected_district_code","selected_school_code","this","className","value","onChange","e","target","map","i","school_name","placeholder","colSpan","length","user_one","usersInfo","full_name","school_one","user_two","school_two","position_name","qualification_name","Component","PermutationsReports","connect","basic"],"mappings":"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","file":"static/js/33.032b407a.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes, Qualifications } from \".\";\nimport { APP_URL } from \"../config/app.config\";\nimport {\n  DistrictTypes,\n  RequestedTransfer,\n  SchoolInfoType,\n  SchoolsType,\n  SchoolsType_2,\n  TransferLeaveType,\n  TransferRequestType,\n  // TransferRequestTypesEnum,\n} from \"../types/TransferTypes\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\n// import { isEmptyOrSpaces } from \"../utils/functions\";\n\nexport type TransferReasonsType = {\n  transfer_reason_id: string;\n  reason_name: string;\n  status: string | null;\n};\n/**\n * * ****************************** ACTIONS *****************************\n */\n\nexport interface GetAllTransferAction {\n  type: ActionTypes.GET_ALL_TRANSFER;\n  payload: TransferRequestType[] | null;\n}\n\nexport interface GetAllLeavesAction {\n  type: ActionTypes.GET_ALL_LEAVES;\n  payload: TransferLeaveType[] | null;\n}\n\nexport interface GetMyTransferAction {\n  type: ActionTypes.GET_MY_TRANSFER;\n  payload: RequestedTransfer[] | null;\n}\n\nexport interface GetQualificationAction {\n  type: ActionTypes.GET_QUALIFICATION;\n  payload: Qualifications[] | null;\n}\n\nexport interface UploadSignedDocumentAction {\n  type: ActionTypes.UPLOAD_SIGNED_DOCUMENT;\n  payload: {\n    teacher_transfer_id: string;\n    mayor_letter: string;\n  };\n}\n\nexport interface RespondToTransferAction {\n  type: ActionTypes.RESPOND_TO_TRANSFER;\n  payload: {\n    teacher_transfer_id: string;\n    requested_status: \"REJECTED\" | \"APPROVED\";\n    approved_school: SchoolInfoType;\n    requested_comment: string;\n  };\n}\n\nexport interface GetTransferReasonsAction {\n  type: ActionTypes.GET_TRANSFER_REASON;\n  payload: TransferReasonsType[] | null;\n}\n\n// ------------------------------------\n\nexport type FT_GetAllTransfer = (\n  callBack: (\n    status: boolean,\n    data: TransferRequestType[] | null,\n    msg: string\n  ) => void\n) => void;\nexport const FC_GetAllTransfers = (\n  callBack: (\n    status: boolean,\n    data: TransferRequestType[] | null,\n    msg: string\n  ) => void\n) => {\n  callBack(true, null, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<TransferRequestType[]>(\n        `${APP_URL}/teachertransfers/requesteddde`\n      );\n      console.log(\"====================================\");\n      console.log({ getAllTransfers: res });\n      console.log(\"====================================\");\n\n      const needed_data = res.data.filter(\n        (item) => item.requested_status === \"APPROVED\"\n      );\n\n      // * save data\n      dispatch<GetAllTransferAction>({\n        type: ActionTypes.GET_ALL_TRANSFER,\n        payload: needed_data,\n      });\n      callBack(false, needed_data, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, null, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n\nexport type FT_GetMyTransfer = (\n  callBack: (\n    status: boolean,\n    data: RequestedTransfer[] | null,\n    msg: string\n  ) => void\n) => void;\nexport const FC_GetMyTransfers = (\n  callBack: (\n    status: boolean,\n    data: RequestedTransfer[] | null,\n    msg: string\n  ) => void\n) => {\n  callBack(true, null, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<RequestedTransfer[]>(\n        `${APP_URL}/teachertransfers/teacher`\n      );\n      // console.log(\"====================================\");\n      // console.log({ getAllTransfers: res });\n      // console.log(\"====================================\");\n\n      // * save data\n      dispatch<GetMyTransferAction>({\n        type: ActionTypes.GET_MY_TRANSFER,\n        payload: res.data,\n      });\n      callBack(false, res.data, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, null, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n\nexport type FT_GetTransferReasons = (\n  callBack: (status: boolean, msg: string) => void\n) => void;\nexport const FC_GetTransferReasons = (\n  callBack: (status: boolean, msg: string) => void\n) => {\n  callBack(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<TransferReasonsType[]>(\n        `${APP_URL}/teachertransfers/transferreasons`\n      );\n      // console.log(\"=================FC_GetTransferReasons===================\");\n      // console.log({ FC_GetTransferReasons: res });\n      // console.log(\"=================FC_GetTransferReasons===================\");\n\n      // * save data\n      dispatch<GetTransferReasonsAction>({\n        type: ActionTypes.GET_TRANSFER_REASON,\n        payload: res.data,\n      });\n      callBack(false, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n\nexport const FC_GetDistricts = async (\n  callBack: (status: boolean, data: DistrictTypes[] | null, msg: string) => void\n) => {\n  // callBack(true, null, \"\");\n  // try {\n  // setAxiosToken();\n  // const res = await axios.get<DistrictTypes[]>(`${APP_URL}/district`);\n  // console.log(\"=================FC_GetDistricts===================\");\n  // console.log({ FC_GetDistricts: res });\n  // console.log(\"=================FC_GetDistricts===================\");\n\n  // * save data\n  callBack(\n    false,\n    [\n      {\n        district_code: \"11\",\n        district_name: \"Nyarugenge\",\n      },\n      {\n        district_code: \"12\",\n        district_name: \"Gasabo\",\n      },\n      {\n        district_code: \"13\",\n        district_name: \"Kicukiro\",\n      },\n      {\n        district_code: \"21\",\n        district_name: \"Nyanza\",\n      },\n      {\n        district_code: \"22\",\n        district_name: \"Gisagara\",\n      },\n      {\n        district_code: \"23\",\n        district_name: \"Nyaruguru\",\n      },\n      {\n        district_code: \"24\",\n        district_name: \"Huye\",\n      },\n      {\n        district_code: \"25\",\n        district_name: \"Nyamagabe\",\n      },\n      {\n        district_code: \"26\",\n        district_name: \"Ruhango\",\n      },\n      {\n        district_code: \"27\",\n        district_name: \"Muhanga\",\n      },\n      {\n        district_code: \"28\",\n        district_name: \"Kamonyi\",\n      },\n      {\n        district_code: \"31\",\n        district_name: \"Karongi\",\n      },\n      {\n        district_code: \"32\",\n        district_name: \"Rutsiro\",\n      },\n      {\n        district_code: \"33\",\n        district_name: \"Rubavu\",\n      },\n      {\n        district_code: \"34\",\n        district_name: \"Nyabihu\",\n      },\n      {\n        district_code: \"35\",\n        district_name: \"Ngororero\",\n      },\n      {\n        district_code: \"36\",\n        district_name: \"Rusizi\",\n      },\n      {\n        district_code: \"37\",\n        district_name: \"Nyamasheke\",\n      },\n      {\n        district_code: \"41\",\n        district_name: \"Rulindo\",\n      },\n      {\n        district_code: \"42\",\n        district_name: \"Gakenke\",\n      },\n      {\n        district_code: \"43\",\n        district_name: \"Musanze\",\n      },\n      {\n        district_code: \"44\",\n        district_name: \"Burera\",\n      },\n      {\n        district_code: \"45\",\n        district_name: \"Gicumbi\",\n      },\n      {\n        district_code: \"51\",\n        district_name: \"Rwamagana\",\n      },\n      {\n        district_code: \"52\",\n        district_name: \"Nyagatare\",\n      },\n      {\n        district_code: \"53\",\n        district_name: \"Gatsibo\",\n      },\n      {\n        district_code: \"54\",\n        district_name: \"Kayonza\",\n      },\n      {\n        district_code: \"55\",\n        district_name: \"Kirehe\",\n      },\n      {\n        district_code: \"56\",\n        district_name: \"Ngoma\",\n      },\n      {\n        district_code: \"57\",\n        district_name: \"Bugesera\",\n      },\n    ],\n    \"\"\n  );\n  // } catch (error) {\n  //   console.log(error);\n  //   callBack(false, null, errorToText(error));\n  //   callBack(\n  //     false,\n  //     errorToText(error, () => {})\n  //   );\n  // }\n};\n\n// file upload function\nexport const FC_UploadFile = async (\n  fileToUpload: File,\n  callBack: (\n    status: boolean,\n    uploadingPercentage: number,\n    data: string | null,\n    msg: string\n  ) => void\n) => {\n  // Validation\n  let number_percentage: number = 0;\n  callBack(true, number_percentage, null, \"\");\n  try {\n    setAxiosToken();\n    const formData = new FormData();\n    formData.append(\"teacher_supporting_document\", fileToUpload);\n    const res = await axios.post<string>(\n      `${APP_URL}/teachertransfers/uploadSupportingDocument`,\n      formData,\n      {\n        onUploadProgress: (progressEvent: any) => {\n          number_percentage =\n            (+progressEvent?.loaded / +progressEvent.total) * 100;\n          callBack(true, number_percentage, null, \"\");\n        },\n      }\n    );\n    console.log(\"Uploaded document: \", res.data);\n    callBack(false, number_percentage, res.data, \"\");\n    // console.log(\"Questions: \", res);\n  } catch (error: any) {\n    console.error(error);\n    callBack(false, number_percentage, \"\", errorToText(error));\n  }\n};\n\n// load school by district\nexport const FC_GetSchoolByDistrict = async (\n  district_code: string,\n  callBack: (status: boolean, data: SchoolsType[] | null, msg: string) => void\n) => {\n  callBack(true, null, \"\");\n  try {\n    setAxiosToken();\n    const res = await axios.get<SchoolsType[]>(\n      `${APP_URL}/teachertransfer/getschoolsperdistrict/${district_code}`\n    );\n    console.log(\"=================FC_GetSchoolByDistrict===================\");\n    console.log({ FC_GetSchoolByDistrict: res });\n    console.log(\"=================FC_GetSchoolByDistrict===================\");\n\n    // * save data\n    callBack(false, res.data, \"\");\n  } catch (error) {\n    console.log(error);\n    callBack(false, null, errorToText(error));\n  }\n};\n\nexport const FC_GetSchoolByDistrict_2 = async (\n  district_code: string,\n  user_id: string,\n  callBack: (status: boolean, data: SchoolsType_2[] | null, msg: string) => void\n) => {\n  callBack(true, null, \"\");\n  try {\n    setAxiosToken();\n    const res = await axios.post<SchoolsType_2[]>(\n      `${APP_URL}/teachertransfer/getschoolsperdistrict/${district_code}`,\n      {\n        user_id,\n      }\n    );\n    console.log(\"=================FC_GetSchoolByDistrict_2===================\");\n    console.log({ FC_GetSchoolByDistrict_2: res });\n    console.log(\"=================FC_GetSchoolByDistrict_2===================\");\n\n    // * save data\n    callBack(false, res.data, \"\");\n  } catch (error) {\n    console.log(error);\n    callBack(false, null, errorToText(error));\n  }\n};\n\nexport type FT_GetQualifications = (\n  callBack: (\n    status: boolean,\n    data: Qualifications[] | null,\n    msg: string\n  ) => void\n) => void;\nexport const FC_GetQualifications = (\n  callBack: (\n    status: boolean,\n    data: Qualifications[] | null,\n    msg: string\n  ) => void\n) => {\n  callBack(true, null, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<Qualifications[]>(\n        `${APP_URL}/teachertransfers/teacher`\n      );\n      console.log(\"================GET_QUALIFICATION====================\");\n      console.log({ GET_QUALIFICATION: res });\n      console.log(\"================GET_QUALIFICATION====================\");\n\n      // * save data\n      dispatch<GetQualificationAction>({\n        type: ActionTypes.GET_QUALIFICATION,\n        payload: res.data,\n      });\n      callBack(false, res.data, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, null, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n\nexport type FT_UploadSignedDocument = (\n  selectedUserId: string,\n  selectedFile: File,\n  callBack: (status: boolean, response_error: string) => void\n) => void;\nexport const FC_UploadSignedDocument = (\n  selectedUserId: string,\n  selectedFile: File,\n  callBack: (status: boolean, response_error: string) => void\n) => {\n  callBack(true, \"\");\n  let doc_title: string = \"\";\n  // FC_HandleUpload(selectedFile);\n\n  return async (dispatch: Dispatch) => {\n    callBack(true, \"\");\n    // await FC_UploadFile(\n    //   selectedFile,\n    //   (\n    //     status: boolean,\n    //     uploadingPercentage: number,\n    //     data: string | null,\n    //     msg: string\n    //   ) => {\n    //     callBack(status, \"\");\n    //     console.log(\"==================&&&&&&&&&&&&&==================\");\n    //     console.log({ data });\n    //     console.log(\"==================&&&&&&&&&&&&&==================\");\n    //     if (!status && isEmptyOrSpaces(msg) && data !== null) doc_title = data;\n    //     else if (!status && !isEmptyOrSpaces(msg)) callBack(false, msg);\n    //     return;\n    //   }\n    // );\n    console.log(\"==================doc_title==================\");\n    console.log({ doc_title });\n    console.log(\"==================doc_title==================\");\n    // if (!isEmptyOrSpaces(doc_title)) {\n    callBack(true, \"\");\n    // const data = {\n    //   teacher_transfer_id: selectedUserId,\n    //   mayor_letter: selectedFile,\n    // };\n\n    const formData = new FormData();\n    formData.append(\"teacher_transfer_id\", selectedUserId);\n    formData.append(\"mayor_letter\", selectedFile);\n\n    console.log(\"==================*********************==================\");\n    console.log({ doc_title });\n    console.log(\"==================*********************==================\");\n\n    try {\n      setAxiosToken();\n      const res = await axios.post<{ mayor_letter: string; message: string }>(\n        `${APP_URL}/teachertransfers/outgoing`,\n        formData\n      );\n      console.log(\"Uploaded document: \", res.data);\n      dispatch<UploadSignedDocumentAction>({\n        type: ActionTypes.UPLOAD_SIGNED_DOCUMENT,\n        payload: {\n          teacher_transfer_id: selectedUserId,\n          mayor_letter: res.data.mayor_letter,\n        },\n      });\n      callBack(false, \"\");\n      // console.log(\"Questions: \", res);\n    } catch (error: any) {\n      console.error(error);\n      callBack(false, errorToText(error));\n    }\n    // }\n  };\n};\n\nexport type FT_RespondTransfer = (\n  teacher_transfer_id: string,\n  approved_school: SchoolInfoType,\n  decision: \"REJECTED\" | \"APPROVED\",\n  comment: string,\n  callBack: (status: boolean, response_error: string) => void\n) => void;\nexport const FC_RespondTransfer = (\n  teacher_transfer_id: string,\n  approved_school: SchoolInfoType,\n  decision: \"REJECTED\" | \"APPROVED\",\n  comment: string,\n  callBack: (status: boolean, response_error: string) => void\n) => {\n  callBack(false, \"\");\n  return async (dispatch: Dispatch) => {\n    callBack(true, \"\");\n    const data = {\n      teacher_transfer_id: teacher_transfer_id,\n      requested_status: decision,\n      approved_school_id: approved_school.school_code,\n      requested_comment: comment,\n    };\n\n    try {\n      setAxiosToken();\n      const res = await axios.post<string>(\n        `${APP_URL}/teachertransfers/incoming`,\n        data\n      );\n      console.log(\"FC_RespondTransfer document: \", res.data);\n      dispatch<RespondToTransferAction>({\n        type: ActionTypes.RESPOND_TO_TRANSFER,\n        payload: {\n          teacher_transfer_id: teacher_transfer_id,\n          requested_status: decision,\n          approved_school: approved_school,\n          requested_comment: comment,\n        },\n      });\n      callBack(false, \"\");\n      // console.log(\"Questions: \", res);\n    } catch (error: any) {\n      console.error(error);\n      // callBack(false, number_percentage, \"\", errorToText(error));\n      callBack(false, errorToText(error));\n    }\n  };\n};\n\nexport type FT_GetAllLeaves = (\n  callBack: (\n    status: boolean,\n    data: TransferLeaveType[] | null,\n    msg: string\n  ) => void\n) => void;\nexport const FC_GetAllLeaves = (\n  callBack: (\n    status: boolean,\n    data: TransferLeaveType[] | null,\n    msg: string\n  ) => void\n) => {\n  callBack(true, null, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<TransferLeaveType[]>(\n        `${APP_URL}/teachertransfers/leavingdde`\n      );\n      console.log(\"=================FC_GetAllLeaves===================\");\n      console.log({ FC_GetAllLeaves: res });\n      console.log(\"=================FC_GetAllLeaves===================\");\n\n      // * save data\n      dispatch<GetAllLeavesAction>({\n        type: ActionTypes.GET_ALL_LEAVES,\n        payload: res.data,\n      });\n      callBack(false, res.data, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, null, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n","// import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { SiMicrosoftexcel } from \"react-icons/si\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  Basic,\n  PermutationsStore,\n  FC_GetPermutationsByDistrict,\n  FC_GetNationalPermutations,\n} from \"../../actions\";\nimport { FC_GetDistricts } from \"../../actions/transfer.action\";\nimport DashboardContainer from \"../../components/DashboardContainer/DashboardContainer\";\nimport Loading from \"../../components/Loading/Loading\";\n// import { APP_URL } from \"../../config/app.config\";\nimport { StoreState } from \"../../reducers\";\nimport { DistrictTypes } from \"../../types/TransferTypes\";\n\ninterface PermutationUserInfo {\n  user_id: string;\n  first_name: string | null;\n  middle_name: string | null;\n  last_name: string | null;\n  full_name: string;\n  staff_code: string;\n  sex: string;\n  dob: string;\n  marital_status: string;\n  nid: string;\n  email: string;\n  phone_numbers: string;\n}\n\ninterface PermutationSchoolInfo {\n  school_name: string;\n  school_code: string;\n}\n\nexport interface GetPermutations {\n  role_id: string;\n  user_one: string;\n  user_two: string;\n  position_code: string;\n  school_one: string;\n  school_two: string;\n  academic_year_id: string;\n  reb_user_id: string;\n  qualification_id: string;\n  role: string;\n  position_name: string;\n  qualification_name: string;\n  permutation_status: string;\n  reb_status: string;\n  usersInfo: PermutationUserInfo[];\n  schools: PermutationSchoolInfo[];\n}\n\ninterface PermutationsReportsProps {\n  auth: Auth;\n  basic: Basic;\n  permutations: PermutationsStore;\n  FC_GetPermutationsByDistrict: (\n    district_code: string,\n    page: number,\n    limit: number,\n    setLoading: (status: boolean) => void\n  ) => void;\n  FC_GetNationalPermutations: (\n    page: number,\n    limit: number,\n    setLoading: (status: boolean) => void\n  ) => void;\n}\ninterface PermutationsReportsState {\n  loading: boolean;\n  selected_school_code: string | null;\n  selected_district_code: string | null;\n  districts: DistrictTypes[] | null;\n  page: number;\n  limit: number;\n  schools_selected: PermutationSchoolInfo[];\n}\n\nclass _PermutationsReports extends Component<\n  PermutationsReportsProps,\n  PermutationsReportsState\n> {\n  constructor(props: PermutationsReportsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      districts: null,\n      selected_district_code:\n        this.props.auth.district !== null &&\n        this.props.auth.role !== null &&\n        this.props.auth.role.role_id === \"3\"\n          ? this.props.auth.district.district_code\n          : null,\n      selected_school_code: null,\n      page: 1,\n      limit: 1000,\n      schools_selected: [],\n    };\n  }\n\n  FilteredData = () => {\n    let test = this.props.permutations.permutations?.find(\n      (itm) => itm.page === this.state.page\n    );\n    if (test !== undefined) {\n      for (let item of test.permutations_data) {\n        this.setState({\n          schools_selected: [...this.state.schools_selected, ...item.schools],\n        });\n      }\n      return test.permutations_data;\n    } else {\n      return null;\n    }\n  };\n\n  componentDidMount = () => {\n    if (this.state.districts === null) {\n      this.setState({ loading: true });\n      FC_GetDistricts(\n        (status: boolean, data: DistrictTypes[] | null, msg: string) => {\n          console.log({ data });\n\n          if (data !== null) {\n            this.setState({\n              districts: data,\n              loading: false,\n            });\n          }\n          this.setState({ loading: false });\n        }\n      );\n    }\n    // Permutations by district\n    if (\n      this.props.permutations.permutations === null &&\n      this.props.auth.district !== null &&\n      this.props.auth.role !== null &&\n      this.props.auth.role.role_id === \"3\"\n    ) {\n      // DDE\n      this.props.FC_GetPermutationsByDistrict(\n        this.props.auth.district.district_code,\n        this.state.page,\n        this.state.limit,\n        this.setLoading\n      );\n    }\n\n    // // National level\n    if (\n      this.props.auth.role?.role_id === \"4\" &&\n      this.props.permutations.permutations === null\n    ) {\n      // this.setState({ loading: true });\n      this.props.FC_GetNationalPermutations(\n        this.state.page,\n        this.state.limit,\n        (status: boolean) => {\n          this.setState({ loading: status });\n        }\n      );\n    }\n  };\n\n  FindUser = (\n    user_id: string,\n    users: PermutationUserInfo[]\n  ): PermutationUserInfo | null => {\n    let user = users.find((itm) => itm.user_id === user_id);\n    if (user !== undefined) {\n      return user;\n    } else {\n      return null;\n    }\n  };\n\n  FindSchool = (school_code: string, schools: PermutationSchoolInfo[]) => {\n    let school = schools.find((itm) => itm.school_code === school_code);\n    if (school !== undefined) {\n      return school;\n    } else {\n      return null;\n    }\n  };\n\n  setLoading = (status: boolean) => this.setState({ loading: status });\n  render() {\n    if (this.state.districts === null || this.state.loading === true) {\n      return (\n        <DashboardContainer>\n          <div className=\"flex flex-col items-center justify-center gap-3 w-full text-center py-5\">\n            <Loading />\n            <div>Loading permutations...</div>\n          </div>\n        </DashboardContainer>\n      );\n    }\n    return (\n      <DashboardContainer>\n        <div>\n          <div className=\"flex flex-row items-center justify-between gap-3\">\n            <div className=\"text-3xl font-bold flex flex-col\">\n              <span>Permutations report</span>\n              <span className=\"text-base font-light text-gray-600\">\n                List of permutations\n              </span>\n            </div>\n            <div className=\"flex flex-row items-center gap-3\">\n              {this.props.auth.district !== null &&\n              this.props.auth.role !== null &&\n              this.props.auth.role.role_id === \"3\" ? (\n                <div className=\"flex flex-col rounded px-3 py-2 bg-gray-100 text-center\">\n                  <span className=\"text-gray-500\">Selected district</span>\n                  <span className=\"font-extrabold\">\n                    {this.props.auth.district.district_name}\n                  </span>\n                </div>\n              ) : (\n                this.props.auth.role !== null &&\n                this.props.auth.role.role_id === \"4\" && (\n                  <div className=\"flex flex-col\">\n                    <span>Filter district</span>\n                    <select\n                      value={\n                        this.state.selected_district_code === null\n                          ? \"\"\n                          : this.state.selected_district_code\n                      }\n                      onChange={(e) =>\n                        this.setState({\n                          selected_district_code: e.target.value,\n                        })\n                      }\n                      className=\"border border-gray-500 rounded px-3 py-2\"\n                    >\n                      <option value=\"\">Choose district</option>\n                      {this.state.districts.map((item, i) => (\n                        <option key={i + 1} value={item.district_code}>\n                          {item.district_name}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                )\n              )}\n              {this.props.auth.school !== null &&\n              this.props.auth.role !== null &&\n              this.props.auth.role.role_id === \"2\" ? (\n                <div className=\"flex flex-col rounded px-3 py-2 bg-gray-100 text-center\">\n                  <span className=\"text-gray-500\">Selected school</span>\n                  <span className=\"font-extrabold\">\n                    {this.props.auth.school.school_name}\n                  </span>\n                </div>\n              ) : (\n                <div className=\"flex flex-col\">\n                  <span>Filter School</span>\n                  <select className=\"px-3 py-2 rounded border border-gray-500\">\n                    <option value=\"\">Choose school</option>\n                    {this.state.schools_selected.map((item, i) => (\n                      <option value={item.school_code}>\n                        {item.school_name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center w-full mt-2 gap-3\">\n            <input\n              placeholder=\"Search\"\n              className=\"px-3 py-2 rounded border border-gray-500 w-full\"\n            />\n            <div className=\"bg-yellow-100 text-black hover:bg-accent-900 hover:text-white rounded px-3 py-2 flex flex-row items-center gap-2 cursor-pointer\">\n              <div>\n                <SiMicrosoftexcel className=\"text-xl\" />\n              </div>\n              <span>Export</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-5\">\n          <table className=\"w-full rounded\">\n            <thead>\n              <tr className=\"bg-blue-100 rounded-t\">\n                <td className=\"px-3 py-2 text-left\">#</td>\n                <td className=\"px-3 py-2 text-left\">User one</td>\n                <td className=\"px-3 py-2 text-left\">School one</td>\n                <td className=\"px-3 py-2 text-left\">User two</td>\n                <td className=\"px-3 py-2 text-left\">School two</td>\n                <td className=\"px-3 py-2 text-left\">Position</td>\n                <td className=\"px-3 py-2 text-left\">Qualification</td>\n              </tr>\n            </thead>\n            <tbody>\n              {this.FilteredData() === null ? (\n                <tr>\n                  <td\n                    colSpan={7}\n                    className=\"text-center p-5 bg-gray-100 rounded-md text-lg\"\n                  >\n                    Loading...\n                  </td>\n                </tr>\n              ) : this.FilteredData()!.length === 0 ? (\n                <tr>\n                  <td\n                    colSpan={7}\n                    className=\"text-center p-5 bg-gray-100 rounded-md text-lg\"\n                  >\n                    No data found!\n                  </td>\n                </tr>\n              ) : (\n                this.FilteredData()!.map((item, i) => (\n                  <tr>\n                    <td>{i + 1}</td>\n                    <td>\n                      {this.FindUser(item.user_one, item.usersInfo)?.full_name}\n                    </td>\n                    <td>\n                      {\n                        this.FindSchool(item.school_one, item.schools)\n                          ?.school_name\n                      }\n                    </td>\n                    <td>\n                      {this.FindUser(item.user_two, item.usersInfo)?.full_name}\n                    </td>\n                    <td>\n                      {\n                        this.FindSchool(item.school_two, item.schools)\n                          ?.school_name\n                      }\n                    </td>\n                    <td>{item.position_name}</td>\n                    <td>{item.qualification_name}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </DashboardContainer>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  basic,\n  permutations,\n}: StoreState): {\n  auth: Auth;\n  basic: Basic;\n  permutations: PermutationsStore;\n} => {\n  return {\n    auth: auth,\n    basic: basic,\n    permutations: permutations,\n  };\n};\n\nexport const PermutationsReports = connect(mapStateToProps, {\n  FC_GetPermutationsByDistrict,\n  FC_GetNationalPermutations,\n})(_PermutationsReports);\n"],"sourceRoot":""}