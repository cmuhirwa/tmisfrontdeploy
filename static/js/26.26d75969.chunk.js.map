{"version":3,"sources":["components/Inputs/InputSelect.tsx","actions/transfer.action.ts","containers/FreeVacancies/FreeVacancies.tsx"],"names":["InputSelect","onChange","value","error","label","placeholder","disabled","name","Input_className","Label_className","InputContainer_className","MainContainer_className","size","data","className","htmlFor","InputSize","map","level","i","title","FC_GetAllTransfers","callBack","dispatch","a","setAxiosToken","axios","get","APP_URL","res","console","log","getAllTransfers","type","ActionTypes","GET_ALL_TRANSFER","payload","errorToText","FC_GetMyTransfers","GET_MY_TRANSFER","FC_GetTransferReasons","GET_TRANSFER_REASON","FC_GetDistricts","FC_UploadFile","fileToUpload","number_percentage","formData","FormData","append","post","onUploadProgress","progressEvent","loaded","total","FC_GetSchoolByDistrict_2","district_code","user_id","FC_RespondLeave","selectedUserId","comment","selectedFile","decision","doc_title","status","uploadingPercentage","msg","isEmptyOrSpaces","teacher_transfer_id","outgoing_status","outgoing_dde_comment","mayor_letter","RESPOND_TO_LEAVE","FC_RespondTransfer","approved_school","requested_status","approved_school_id","school_code","requested_comment","RESPOND_TO_TRANSFER","FC_GetAllLeaves","GET_ALL_LEAVES","_FreeVacancies","props","componentDidMount","setState","loading_district","districts","target","selectDistrict","district","selected_district","loading_vacancies","vacancies","FC_GetFreeVacancies","state","selected_qualification","search","this","theme","fixed","VacanciesData","district_schools_position_occupation","filter","itm","qualification_id","position_code","position_name","qualification_name","school_name","district_name","onClick","bind","event","qualifications","e","length","dist","colSpan","vacant","React","Component","FreeVacancies","connect","auth","basic","placement"],"mappings":"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","file":"static/js/26.26d75969.chunk.js","sourcesContent":["import React, { ChangeEvent, FC, ReactElement } from \"react\";\nimport { InputSize, InputSizeType } from \"./InputTypes\";\n\ntype InputSelectProps = {\n  onChange: (event: ChangeEvent<HTMLSelectElement>) => void;\n  value: string | number;\n  error: string;\n  label: string;\n  placeholder: string;\n  disabled?: boolean;\n  name: string;\n  className?: string;\n  size?: InputSizeType;\n  Input_className?: string;\n  Label_className?: string;\n  InputContainer_className?: string;\n  MainContainer_className?: string;\n  data: { title: string; value: string | number }[];\n};\n\nconst InputSelect: FC<InputSelectProps> = ({\n  onChange,\n  value,\n  error,\n  label,\n  placeholder,\n  disabled = false,\n  name,\n  Input_className = \"\",\n  Label_className = \"\",\n  InputContainer_className = \"\",\n  MainContainer_className = \"\",\n  size = \"md\",\n  data,\n}): ReactElement => {\n  /* function body */\n  return (\n    <>\n      <div className={`w-full my-2 ${MainContainer_className}`}>\n        {label && (\n          <label\n            htmlFor=\"login-form-email\"\n            className={`text-primary-900 dark:text-primary-100 ${Label_className}`}\n          >\n            {label}\n          </label>\n        )}\n        <div className={`rounded relative ${InputContainer_className}`}>\n          <select\n            name={name}\n            placeholder={placeholder}\n            onChange={onChange}\n            className={`\n                     w-full text-lg rounded border-2 \n                     ${InputSize(size)}\n                     ${\n                       error !== \"\"\n                         ? \"border-red-500 dark:text-white bg-red-100 dark:bg-red-900 dark:bg-opacity-30\"\n                         : \"border-primary-800 dark:text-white bg-white dark:bg-primary-900 \"\n                     }\n                     px-3 ${Input_className}`}\n            value={value}\n            disabled={disabled}\n            // className=\"p-2 border-2 bg-white border-primary-900 rounded w-full\"\n          >\n            {data.map((level, i) => (\n              <option key={i} value={level.value}>\n                {level.title}\n              </option>\n            ))}\n          </select>\n\n          {error !== \"\" && (\n            <p className=\"text-sm text-red-600 dark:text-red-500\">{error}</p>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\nexport default InputSelect;\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes, Qualifications } from \".\";\nimport { APP_URL } from \"../config/app.config\";\nimport {\n  DistrictTypes,\n  RequestedTransfer,\n  SchoolInfoType,\n  SchoolsType,\n  SchoolsType_2,\n  TransferLeaveType,\n  TransferRequestType,\n} from \"../types/TransferTypes\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport { isEmptyOrSpaces } from \"../utils/functions\";\n\nexport type TransferReasonsType = {\n  transfer_reason_id: string;\n  reason_name: string;\n  status: string | null;\n};\n/**\n * * ****************************** ACTIONS *****************************\n */\n\nexport interface GetAllTransferAction {\n  type: ActionTypes.GET_ALL_TRANSFER;\n  payload: TransferRequestType[] | null;\n}\n\nexport interface GetAllLeavesAction {\n  type: ActionTypes.GET_ALL_LEAVES;\n  payload: TransferLeaveType[] | null;\n}\n\nexport interface GetMyTransferAction {\n  type: ActionTypes.GET_MY_TRANSFER;\n  payload: RequestedTransfer[] | null;\n}\n\nexport interface GetQualificationAction {\n  type: ActionTypes.GET_QUALIFICATION;\n  payload: Qualifications[] | null;\n}\n\nexport interface RespondToLeaveAction {\n  type: ActionTypes.RESPOND_TO_LEAVE;\n  payload: {\n    teacher_transfer_id: string;\n    outgoing_status: \"REJECTED\" | \"APPROVED\";\n    outgoing_dde_comment: string;\n    mayor_letter: string;\n  };\n}\n\nexport interface RespondToTransferAction {\n  type: ActionTypes.RESPOND_TO_TRANSFER;\n  payload: {\n    teacher_transfer_id: string;\n    requested_status: \"REJECTED\" | \"APPROVED\";\n    approved_school: SchoolInfoType;\n    requested_comment: string;\n  };\n}\n\nexport interface GetTransferReasonsAction {\n  type: ActionTypes.GET_TRANSFER_REASON;\n  payload: TransferReasonsType[] | null;\n}\n\n// ------------------------------------\n\nexport type FT_GetAllTransfer = (\n  callBack: (\n    status: boolean,\n    data: TransferRequestType[] | null,\n    msg: string\n  ) => void\n) => void;\nexport const FC_GetAllTransfers = (\n  callBack: (\n    status: boolean,\n    data: TransferRequestType[] | null,\n    msg: string\n  ) => void\n) => {\n  callBack(true, null, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<TransferRequestType[]>(\n        `${APP_URL}/teachertransfers/requesteddde`\n      );\n      console.log(\"====================================\");\n      console.log({ getAllTransfers: res });\n      console.log(\"====================================\");\n\n      // * save data\n      dispatch<GetAllTransferAction>({\n        type: ActionTypes.GET_ALL_TRANSFER,\n        payload: res.data,\n      });\n      callBack(false, res.data, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, null, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n\nexport type FT_GetMyTransfer = (\n  callBack: (\n    status: boolean,\n    data: RequestedTransfer[] | null,\n    msg: string\n  ) => void\n) => void;\nexport const FC_GetMyTransfers = (\n  callBack: (\n    status: boolean,\n    data: RequestedTransfer[] | null,\n    msg: string\n  ) => void\n) => {\n  callBack(true, null, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<RequestedTransfer[]>(\n        `${APP_URL}/teachertransfers/teacher`\n      );\n      console.log(\"====================================\");\n      console.log({ getAllTransfers: res });\n      console.log(\"====================================\");\n\n      // * save data\n      dispatch<GetMyTransferAction>({\n        type: ActionTypes.GET_MY_TRANSFER,\n        payload: res.data,\n      });\n      callBack(false, res.data, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, null, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n\nexport type FT_GetTransferReasons = (\n  callBack: (status: boolean, msg: string) => void\n) => void;\nexport const FC_GetTransferReasons = (\n  callBack: (status: boolean, msg: string) => void\n) => {\n  callBack(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<TransferReasonsType[]>(\n        `${APP_URL}/teachertransfers/transferreasons`\n      );\n      console.log(\"=================FC_GetTransferReasons===================\");\n      console.log({ FC_GetTransferReasons: res });\n      console.log(\"=================FC_GetTransferReasons===================\");\n\n      // * save data\n      dispatch<GetTransferReasonsAction>({\n        type: ActionTypes.GET_TRANSFER_REASON,\n        payload: res.data,\n      });\n      callBack(false, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n\nexport const FC_GetDistricts = async (\n  callBack: (status: boolean, data: DistrictTypes[] | null, msg: string) => void\n) => {\n  callBack(true, null, \"\");\n  try {\n    setAxiosToken();\n    const res = await axios.get<DistrictTypes[]>(`${APP_URL}/district`);\n    console.log(\"=================FC_GetDistricts===================\");\n    console.log({ FC_GetDistricts: res });\n    console.log(\"=================FC_GetDistricts===================\");\n\n    // * save data\n    callBack(false, res.data, \"\");\n  } catch (error) {\n    console.log(error);\n    callBack(false, null, errorToText(error));\n    //   callBack(\n    //     false,\n    //     errorToText(error, () => {})\n    //   );\n  }\n};\n\n// file upload function\nexport const FC_UploadFile = async (\n  fileToUpload: File,\n  callBack: (\n    status: boolean,\n    uploadingPercentage: number,\n    data: string | null,\n    msg: string\n  ) => void\n) => {\n  // Validation\n  let number_percentage: number = 0;\n  callBack(true, number_percentage, null, \"\");\n  try {\n    setAxiosToken();\n    const formData = new FormData();\n    formData.append(\"teacher_supporting_document\", fileToUpload);\n    const res = await axios.post<string>(\n      `${APP_URL}/teachertransfers/uploadSupportingDocument`,\n      formData,\n      {\n        onUploadProgress: (progressEvent: any) => {\n          number_percentage =\n            (+progressEvent?.loaded / +progressEvent.total) * 100;\n          callBack(true, number_percentage, null, \"\");\n        },\n      }\n    );\n    console.log(\"Uploaded document: \", res.data);\n    callBack(false, number_percentage, res.data, \"\");\n    // console.log(\"Questions: \", res);\n  } catch (error: any) {\n    console.error(error);\n    callBack(false, number_percentage, \"\", errorToText(error));\n  }\n};\n\n// load school by district\nexport const FC_GetSchoolByDistrict = async (\n  district_code: string,\n  callBack: (status: boolean, data: SchoolsType[] | null, msg: string) => void\n) => {\n  callBack(true, null, \"\");\n  try {\n    setAxiosToken();\n    const res = await axios.get<SchoolsType[]>(\n      `${APP_URL}/teachertransfer/getschoolsperdistrict/${district_code}`\n    );\n    console.log(\"=================FC_GetSchoolByDistrict===================\");\n    console.log({ FC_GetSchoolByDistrict: res });\n    console.log(\"=================FC_GetSchoolByDistrict===================\");\n\n    // * save data\n    callBack(false, res.data, \"\");\n  } catch (error) {\n    console.log(error);\n    callBack(false, null, errorToText(error));\n  }\n};\n\nexport const FC_GetSchoolByDistrict_2 = async (\n  district_code: string,\n  user_id: string,\n  callBack: (status: boolean, data: SchoolsType_2[] | null, msg: string) => void\n) => {\n  callBack(true, null, \"\");\n  try {\n    setAxiosToken();\n    const res = await axios.post<SchoolsType_2[]>(\n      `${APP_URL}/teachertransfer/getschoolsperdistrict/${district_code}`,\n      {\n        user_id,\n      }\n    );\n    console.log(\"=================FC_GetSchoolByDistrict_2===================\");\n    console.log({ FC_GetSchoolByDistrict_2: res });\n    console.log(\"=================FC_GetSchoolByDistrict_2===================\");\n\n    // * save data\n    callBack(false, res.data, \"\");\n  } catch (error) {\n    console.log(error);\n    callBack(false, null, errorToText(error));\n  }\n};\n\nexport type FT_GetQualifications = (\n  callBack: (\n    status: boolean,\n    data: Qualifications[] | null,\n    msg: string\n  ) => void\n) => void;\nexport const FC_GetQualifications = (\n  callBack: (\n    status: boolean,\n    data: Qualifications[] | null,\n    msg: string\n  ) => void\n) => {\n  callBack(true, null, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<Qualifications[]>(\n        `${APP_URL}/teachertransfers/teacher`\n      );\n      console.log(\"================GET_QUALIFICATION====================\");\n      console.log({ GET_QUALIFICATION: res });\n      console.log(\"================GET_QUALIFICATION====================\");\n\n      // * save data\n      dispatch<GetQualificationAction>({\n        type: ActionTypes.GET_QUALIFICATION,\n        payload: res.data,\n      });\n      callBack(false, res.data, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, null, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n\nexport const FC_RespondLeave = (\n  selectedUserId: string,\n  comment: string,\n  selectedFile: File,\n  decision: \"REJECTED\" | \"APPROVED\",\n  callBack: (status: boolean, response_error: string) => void\n) => {\n  callBack(true, \"\");\n  let doc_title: string = \"\";\n  // FC_HandleUpload(selectedFile);\n\n  return async (dispatch: Dispatch) => {\n    callBack(true, \"\");\n    await FC_UploadFile(\n      selectedFile,\n      (\n        status: boolean,\n        uploadingPercentage: number,\n        data: string | null,\n        msg: string\n      ) => {\n        callBack(status, \"\");\n        console.log(\"==================&&&&&&&&&&&&&==================\");\n        console.log({ data });\n        console.log(\"==================&&&&&&&&&&&&&==================\");\n        if (!status && isEmptyOrSpaces(msg) && data !== null) doc_title = data;\n        else if (!status && !isEmptyOrSpaces(msg)) callBack(false, msg);\n        return;\n      }\n    );\n    if (!isEmptyOrSpaces(doc_title)) {\n      callBack(true, \"\");\n      const data = {\n        teacher_transfer_id: selectedUserId,\n        outgoing_status: decision,\n        outgoing_dde_comment: comment,\n        mayor_letter: doc_title,\n      };\n\n      console.log(\"==================*********************==================\");\n      console.log({ doc_title });\n      console.log(\"==================*********************==================\");\n\n      try {\n        setAxiosToken();\n        const res = await axios.post<string>(\n          `${APP_URL}/teachertransfers/outgoing`,\n          data\n        );\n        console.log(\"Uploaded document: \", res.data);\n        dispatch<RespondToLeaveAction>({\n          type: ActionTypes.RESPOND_TO_LEAVE,\n          payload: data,\n        });\n        callBack(false, \"\");\n        // console.log(\"Questions: \", res);\n      } catch (error: any) {\n        console.error(error);\n        callBack(false, errorToText(error));\n      }\n    }\n  };\n};\n\nexport type FT_RespondTransfer = (\n  teacher_transfer_id: string,\n  approved_school: SchoolInfoType,\n  decision: \"REJECTED\" | \"APPROVED\",\n  comment: string,\n  callBack: (status: boolean, response_error: string) => void\n) => void;\nexport const FC_RespondTransfer = (\n  teacher_transfer_id: string,\n  approved_school: SchoolInfoType,\n  decision: \"REJECTED\" | \"APPROVED\",\n  comment: string,\n  callBack: (status: boolean, response_error: string) => void\n) => {\n  callBack(false, \"\");\n  return async (dispatch: Dispatch) => {\n    callBack(true, \"\");\n    const data = {\n      teacher_transfer_id: teacher_transfer_id,\n      requested_status: decision,\n      approved_school_id: approved_school.school_code,\n      requested_comment: comment,\n    };\n\n    try {\n      setAxiosToken();\n      const res = await axios.post<string>(\n        `${APP_URL}/teachertransfers/incoming`,\n        data\n      );\n      console.log(\"FC_RespondTransfer document: \", res.data);\n      dispatch<RespondToTransferAction>({\n        type: ActionTypes.RESPOND_TO_TRANSFER,\n        payload: {\n          teacher_transfer_id: teacher_transfer_id,\n          requested_status: decision,\n          approved_school: approved_school,\n          requested_comment: comment,\n        },\n      });\n      callBack(false, \"\");\n      // console.log(\"Questions: \", res);\n    } catch (error: any) {\n      console.error(error);\n      // callBack(false, number_percentage, \"\", errorToText(error));\n      callBack(false, errorToText(error));\n    }\n  };\n};\n\nexport type FT_GetAllLeaves = (\n  callBack: (\n    status: boolean,\n    data: TransferLeaveType[] | null,\n    msg: string\n  ) => void\n) => void;\nexport const FC_GetAllLeaves = (\n  callBack: (\n    status: boolean,\n    data: TransferLeaveType[] | null,\n    msg: string\n  ) => void\n) => {\n  callBack(true, null, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<TransferLeaveType[]>(\n        `${APP_URL}/teachertransfers/leavingdde`\n      );\n      console.log(\"=================FC_GetAllLeaves===================\");\n      console.log({ FC_GetAllLeaves: res });\n      console.log(\"=================FC_GetAllLeaves===================\");\n\n      // * save data\n      dispatch<GetAllLeavesAction>({\n        type: ActionTypes.GET_ALL_LEAVES,\n        payload: res.data,\n      });\n      callBack(false, res.data, \"\");\n    } catch (error) {\n      console.log(error);\n      callBack(false, null, errorToText(error));\n      //   callBack(\n      //     false,\n      //     errorToText(error, () => {})\n      //   );\n    }\n  };\n};\n","import React, { Fragment } from \"react\";\nimport { MdCancel, MdOutlineArrowForward } from \"react-icons/md\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  Basic,\n  district_schools_position_occupation,\n  FC_GetFreeVacancies,\n  FreeVacanciesInterface,\n  Placement,\n} from \"../../actions\";\nimport { FC_GetDistricts } from \"../../actions/transfer.action\";\nimport Alert from \"../../components/Alert/Alert\";\n// import Button from \"../../components/Buttons/Button\";\nimport DashboardContainer from \"../../components/DashboardContainer/DashboardContainer\";\nimport Heading from \"../../components/Heading/Heading\";\nimport InputSelect from \"../../components/Inputs/InputSelect\";\nimport TextInput from \"../../components/Inputs/TextInput\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { StoreState } from \"../../reducers\";\nimport { DistrictTypes } from \"../../types/TransferTypes\";\nimport { search } from \"../../utils/functions\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  basic: Basic;\n  placement: Placement;\n}\n\ninterface AppState {\n  loading_district: boolean;\n  error: {\n    target: \"main-success\" | \"main-error\" | null;\n    msg: string;\n  };\n  districts: DistrictTypes[];\n  vacancies: FreeVacanciesInterface | null;\n  selected_district: DistrictTypes | null;\n  loading_vacancies: boolean;\n  selected_qualification: string;\n  search: string;\n}\n\nclass _FreeVacancies extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading_vacancies: false,\n      loading_district: true,\n      districts: [],\n      vacancies: null,\n      selected_district: null,\n      error: {\n        target: null,\n        msg: \"\",\n      },\n      selected_qualification: \"\",\n      search: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    FC_GetDistricts((status, data, msg) => {\n      this.setState({\n        loading_district: false,\n        districts: data === null ? [] : data,\n        error:\n          data === null\n            ? {\n                target: \"main-error\",\n                msg: \"msg\",\n              }\n            : {\n                target: null,\n                msg: \"\",\n              },\n      });\n    });\n  };\n\n  selectDistrict = (district: DistrictTypes | null) => {\n    if (district !== null) {\n      this.setState({\n        selected_district: district,\n        loading_vacancies: true,\n        vacancies: null,\n      });\n\n      FC_GetFreeVacancies(district.district_code, (status, data, msg) => {\n        if (status === true) {\n          this.setState({\n            loading_vacancies: false,\n            vacancies: data,\n          });\n        } else {\n          this.setState({\n            loading_vacancies: false,\n            vacancies: null,\n            error: {\n              target: \"main-error\",\n              msg: msg,\n            },\n          });\n        }\n      });\n    } else {\n      this.setState({ selected_district: district });\n    }\n  };\n\n  render() {\n    if (this.state.loading_district === true)\n      return (\n        <div className=\"p-8 text-center\">\n          <div className=\"mx-auto\">\n            <Loading />\n          </div>\n        </div>\n      );\n\n    if (this.state.error.target === \"main-error\") {\n      return (\n        <Alert theme=\"danger\" fixed>\n          {this.state.error.msg}\n        </Alert>\n      );\n    }\n\n    let VacanciesData: district_schools_position_occupation[] = [];\n\n    if (this.state.vacancies !== null) {\n      VacanciesData =\n        this.state.selected_qualification === \"\"\n          ? this.state.vacancies.district_schools_position_occupation\n          : this.state.vacancies.district_schools_position_occupation.filter(\n              (itm) =>\n                itm.qualification_id === this.state.selected_qualification\n            );\n\n      // Search data\n      VacanciesData = search(VacanciesData, this.state.search, {\n        position_code: true,\n        position_name: true,\n        qualification_name: true,\n        school_code: true,\n        school_name: true,\n      });\n    }\n\n    return (\n      <>\n        {this.state.error.target === \"main-success\" && (\n          <Alert theme=\"success\" fixed>\n            {this.state.error.msg}\n          </Alert>\n        )}\n\n        <>\n          <div className=\"sticky top-14\">\n            <DashboardContainer>\n              <Heading className=\"text-center pb-2\">\n                Available vacancies\n              </Heading>\n              {this.state.selected_district !== null && (\n                <div className=\"border-t p-1 flex pt-2\">\n                  <div className=\"pt-1 flex items-center\">\n                    <div className=\"border rounded flex pl-2\">\n                      <h2 className=\"p-2 font-bold text-xl\">\n                        {this.state.selected_district.district_name} district\n                      </h2>\n                      <button\n                        className=\"p-2 py-3 hover:bg-red-200 text-red-500 rounded\"\n                        onClick={this.selectDistrict.bind(this, null)}\n                      >\n                        <MdCancel className=\"text-2xl\" />\n                      </button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center mx-2 px-2 border rounded\">\n                    <label htmlFor=\"\" className=\"text-lg pr-2 \">\n                      Qualification:{\" \"}\n                    </label>\n                    <InputSelect\n                      size=\"sm\"\n                      onChange={(event: React.ChangeEvent<HTMLSelectElement>) =>\n                        this.setState({\n                          selected_qualification: event.target.value,\n                        })\n                      }\n                      value={this.state.selected_qualification}\n                      error={\"\"}\n                      label={\"\"}\n                      placeholder={\"Select Qualification\"}\n                      name={\"\"}\n                      data={[\n                        { title: \"Select Qualification\", value: \"\" },\n                        ...(this.state.vacancies\n                          ? this.state.vacancies?.qualifications.map((itm) => ({\n                              title: itm.qualification_name,\n                              value: itm.qualification_id,\n                            }))\n                          : []),\n                      ]}\n                    />\n                  </div>\n\n                  <div className=\"mx-2 flex items-center border px-2 rounded\">\n                    <label className=\"text-lg pr-2\">Search</label>\n                    <TextInput\n                      error=\"\"\n                      label=\"\"\n                      name=\"\"\n                      size=\"sm\"\n                      onChange={(e) =>\n                        this.setState({ search: e.target.value })\n                      }\n                      placeholder=\"Search\"\n                      value={this.state.search}\n                    />\n                  </div>\n                </div>\n              )}\n            </DashboardContainer>\n          </div>\n\n          {this.state.selected_district === null ? (\n            <DashboardContainer>\n              <div>\n                <h2 className=\"text-center p-2 text-gray-400 pb-4 text-2xl\">\n                  Please select a district\n                </h2>\n\n                {this.state.districts.length >= 1 ? (\n                  <div className=\"grid grid-cols-2 gap-2 \">\n                    {this.state.districts.map((dist) => (\n                      <div\n                        onClick={this.selectDistrict.bind(this, dist)}\n                        key={dist.district_code}\n                        className=\"p-2 flex cursor-pointer rounded border  px-3 hover:text-blue-600 hover:border-blue-600 hover:bg-blue-100 bg-white text-lg\"\n                      >\n                        <h4 className=\"flex-1 text-lg\">\n                          {\" \"}\n                          <b>{dist.district_name}</b> district\n                        </h4>\n                        <button className=\"\">\n                          <MdOutlineArrowForward />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div>\n                    <h2 className=\"text-center p-4 text-gray-400  text-2xl\">\n                      Something went wrong, <br /> please try again later\n                    </h2>\n                  </div>\n                )}\n              </div>\n            </DashboardContainer>\n          ) : (\n            <DashboardContainer>\n              {this.state.loading_vacancies === true ? (\n                <div className=\"text-center py-10\">\n                  <Loading />\n                </div>\n              ) : (\n                <div>\n                  {this.state.vacancies === null ? (\n                    <Alert theme=\"danger\">Failed to load the data</Alert>\n                  ) : (\n                    <table className=\"w-full border\">\n                      <thead className=\"text-left\">\n                        <tr>\n                          <th className=\"p-2 border\">#</th>\n                          <th className=\"p-2 border\">School code</th>\n                          <th className=\"p-2 border\">School name</th>\n                          <th className=\"p-2 border\">Position code</th>\n                          <th className=\"p-2 border\">Position name</th>\n                          <th className=\"p-2 border\">Qualification</th>\n                          <th className=\"p-2 border\">Vacant</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {VacanciesData.length <= 0 ? (\n                          <tr>\n                            <td colSpan={8} className=\"text-center py-8\">\n                              <Heading>No results found</Heading>\n                              <p className=\"pt-1 text-gray-600\">\n                                Please search using:{\" \"}\n                                <b>\n                                  school code, school name, position code,\n                                  position name\n                                </b>\n                              </p>\n                            </td>\n                          </tr>\n                        ) : (\n                          VacanciesData.map((itm, i) => (\n                            <tr key={i}>\n                              <td className=\"p-2 border\">{i + 1}</td>\n                              <td className=\"p-2 border\">{itm.school_code}</td>\n                              <td className=\"p-2 border\">{itm.school_name}</td>\n                              <td className=\"p-2 border\">\n                                {itm.position_code}\n                              </td>\n                              <td className=\"p-2 border\">\n                                {itm.position_name}\n                              </td>\n                              <td className=\"p-2 border\">\n                                {itm.qualification_name}\n                              </td>\n                              <td className=\"p-2 border\">{itm.vacant}</td>\n                            </tr>\n                          ))\n                        )}\n                      </tbody>\n                    </table>\n                  )}\n                </div>\n              )}\n            </DashboardContainer>\n          )}\n        </>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  basic,\n  placement,\n}: StoreState): { auth: Auth; basic: Basic; placement: Placement } => {\n  return { auth: auth, basic: basic, placement: placement };\n};\n\nexport const FreeVacancies = connect(mapStateToProps, {})(_FreeVacancies);\n"],"sourceRoot":""}