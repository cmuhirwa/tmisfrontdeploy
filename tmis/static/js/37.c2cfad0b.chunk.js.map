{"version":3,"sources":["containers/PostLimitsNational/PostLimitsNational.tsx"],"names":["_NewComponent","props","componentDidMount","RenderPageAccess","auth","role","access","UsersAccess","ADD_COUNTRY_POST_LIMITATION","startProcess","onChangeData","qualification_id","value","setState","limits","state","map","el","parseInt","SendData","validationData","key","dataKey","isNaN","error","target","msg","loading","FC_SavePostLimit","status","setTimeout","loading_posts","this","basic","academic_calender","qualifications","academic_id","academic_year_id","qual","qualification_name","current_teachers","total_teachers","FC_GetPosyLimit","data","find_lim","find","find_existing","current_teacher","it","existing_number","undefined","className","total_current","arrayNumSum","num","total","total_current_and_new_vacant","container","size","theme","academic_year_name","fixed","onClick","bind","lim","i","type","onChange","e","disabled","colSpan","full","React","Component","PostLimitsNational","connect"],"mappings":"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","file":"static/js/37.c2cfad0b.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  Basic,\n  CurrentTeacher,\n  FC_GetPosyLimit,\n  FC_SavePostLimit,\n  FT_GetPosyLimit,\n  FT_SavePostLimit,\n  PostLimit,\n  PostLimitState,\n} from \"../../actions\";\nimport Alert from \"../../components/Alert/Alert\";\nimport Button from \"../../components/Buttons/Button\";\nimport DashboardContainer from \"../../components/DashboardContainer/DashboardContainer\";\nimport Heading from \"../../components/Heading/Heading\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { StoreState } from \"../../reducers\";\nimport { RenderPageAccess, UsersAccess } from \"../../utils/access\";\nimport { arrayNumSum } from \"../../utils/functions\";\n\ninterface AppProps {\n  auth: Auth;\n  basic: Basic;\n  FC_GetPosyLimit: FT_GetPosyLimit;\n  FC_SavePostLimit: FT_SavePostLimit;\n}\n\ninterface CurrentTeacherNew extends PostLimitState {\n  current_teachers: string;\n}\n\ninterface AppState {\n  loading: boolean;\n  loading_posts: boolean;\n  error: {\n    target: string | \"main\" | \"net-error\";\n    msg: string;\n  };\n  limits: CurrentTeacherNew[];\n}\n\nclass _NewComponent extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loading_posts: true,\n      error: {\n        msg: \"\",\n        target: \"\",\n      },\n      limits: [],\n    };\n  }\n\n  componentDidMount = () => {\n    RenderPageAccess(\n      this.props.auth.role?.access,\n      UsersAccess.ADD_COUNTRY_POST_LIMITATION,\n      () => {\n        this.startProcess();\n      }\n    );\n  };\n\n  startProcess() {\n    if (\n      this.props.basic.academic_calender !== null &&\n      this.props.basic.qualifications !== null\n    ) {\n      let academic_id = this.props.basic.academic_calender.academic_year_id;\n      this.setState({\n        limits: this.props.basic.qualifications.map((qual) => {\n          return {\n            academic_year_id: academic_id,\n            limits: 0,\n            qualification_id: qual.qualification_id,\n            qualification_name: qual.qualification_name,\n            current_teachers: \"0\",\n            total_teachers: \"0\",\n          } as CurrentTeacherNew;\n        }),\n        loading_posts: true,\n      });\n\n      this.props.FC_GetPosyLimit(academic_id, (status, data, msg) => {\n        if (status === true && data != null) {\n          this.setState({\n            loading: false,\n            limits: this.props.basic.qualifications.map((qual) => {\n              let find_lim = data.limits.find(\n                (el) =>\n                  el.academic_year_id === academic_id &&\n                  el.qualification_id === qual.qualification_id\n              );\n\n              let find_existing = data.current_teacher.find(\n                (it) => it.qualification_id === qual.qualification_id\n              );\n              let existing_number: number =\n                find_existing === undefined ? 0 : +find_existing.total_teachers;\n              return {\n                academic_year_id: academic_id,\n                limits: find_lim === undefined ? 0 : find_lim.limits,\n                qualification_id: qual.qualification_id,\n                qualification_name: qual.qualification_name,\n                current_teachers: existing_number + \"\",\n                total_teachers: \"0\",\n              } as CurrentTeacherNew;\n            }),\n            loading_posts: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n            loading_posts: false,\n            error: {\n              target: \"main-error-danger\",\n              msg: msg,\n            },\n          });\n        }\n      });\n    } else {\n      this.setState({\n        error: {\n          msg: \"\",\n          target: \"\",\n        },\n      });\n    }\n  }\n\n  onChangeData = (qualification_id: string, value: string) => {\n    this.setState({\n      limits: this.state.limits.map((el) =>\n        el.qualification_id === qualification_id\n          ? { ...el, limits: parseInt(value) }\n          : el\n      ),\n    });\n  };\n\n  SendData = () => {\n    // validation\n    let validationData = this.state.limits;\n    for (const key in validationData) {\n      const dataKey = validationData[key];\n\n      if (isNaN(dataKey.limits)) {\n        return this.setState({\n          error: {\n            target: `input-${dataKey.qualification_id}`,\n            msg: \"Please provide the correct value\",\n          },\n        });\n      }\n    }\n\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_SavePostLimit(\n      this.state.limits.map(\n        (el) =>\n          ({\n            ...el,\n            limits: +el.limits,\n          } as PostLimit)\n      ),\n      (status, msg) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n            error: {\n              target: \"main-success\",\n              msg: \"Updated successfully\",\n            },\n          });\n        } else {\n          this.setState({\n            loading: false,\n            error: {\n              target: \"main-error\",\n              msg: msg,\n            },\n          });\n        }\n\n        setTimeout(() => {\n          this.setState({\n            error: {\n              target: \"\",\n              msg: \"\",\n            },\n          });\n        }, 3000);\n      }\n    );\n  };\n\n  // send data\n\n  render() {\n    if (this.state.loading_posts === true)\n      return (\n        <div className=\"p-8 text-center\">\n          <Loading />\n        </div>\n      );\n    let total_current = arrayNumSum(\n      this.state.limits.map((num) => +num.current_teachers)\n    );\n\n    let total = arrayNumSum(this.state.limits.map((num) => +num.limits));\n\n    let total_current_and_new_vacant = arrayNumSum(\n      this.state.limits.map((num) => +num.current_teachers + +num.limits)\n    );\n    return (\n      <DashboardContainer container={true}>\n        <div className=\"flex items-center\">\n          <div className=\"flex-1\">\n            <Heading>Posts Limits</Heading>\n            <Heading size=\"sm\" theme=\"accent\">\n              <b>{this.props.basic.academic_calender?.academic_year_name}</b>\n            </Heading>\n            {/* <p className=\"opacity-70\">Set the post limits on each level</p> */}\n          </div>\n\n          <div className=\"flex items-center\">\n            <div className=\"p-1 px-3 bg-blue-100 rounded mx-2\">\n              <p className=\"text-sm\">Existing teachers</p>\n              <h2 className=\"text-2xl -mt-1 font-bold\">\n                {isNaN(total_current) ? \"\" : total_current}\n              </h2>\n            </div>\n\n            <div className=\"p-1 px-3 bg-blue-100 rounded mx-2\">\n              <p className=\"text-sm\">New posts</p>\n              <h2 className=\"text-2xl -mt-1 font-bold\">\n                {isNaN(total) ? \"\" : total}\n              </h2>\n            </div>\n\n            <div className=\"p-1 px-3 bg-blue-100 rounded ml-2\">\n              <p className=\"text-sm\">Total posts</p>\n              <h2 className=\"text-2xl -mt-1 font-bold\">\n                {isNaN(total_current_and_new_vacant)\n                  ? \"\"\n                  : total_current_and_new_vacant}\n              </h2>\n            </div>\n          </div>\n        </div>\n\n        {this.state.error.target === \"main-success\" && (\n          <Alert theme=\"success\" fixed>\n            {this.state.error.msg}\n          </Alert>\n        )}\n\n        {this.state.error.target === \"main-error\" && (\n          <Alert theme=\"danger\" fixed>\n            {this.state.error.msg}\n          </Alert>\n        )}\n\n        {this.state.error.target === \"main-error-danger\" && (\n          <>\n            <Alert theme=\"danger\" fixed>\n              {this.state.error.msg}\n            </Alert>\n            <div className=\"p-3\">\n              <Button\n                className=\"mx-auto block\"\n                onClick={this.startProcess.bind(this)}\n              >\n                Try again\n              </Button>\n            </div>\n          </>\n        )}\n\n        {this.state.error.target !== \"main-error-danger\" && (\n          <div className=\"mt-2\">\n            <table className=\"w-full\">\n              <thead className=\"text-left bg-gray-100 dark:bg-dark-900\">\n                <tr className=\"border\">\n                  <th className=\"w-10 p-1 border\">#</th>\n                  <th className=\"p-1 border\">Qualification</th>\n                  <th className=\"p-1 border\">Existing teachers</th>\n                  <th className=\"p-1 border\">New posts</th>\n                  <th className=\"p-1 border\">Total posts</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.limits.map((lim, i) => (\n                  <tr key={i}>\n                    <td className=\"border p-2 opacity-50\">{i + 1}</td>\n                    <td className=\"border p-2\">\n                      <b>{lim.qualification_name}</b>\n                    </td>\n                    <td className=\"border p-2\">\n                      <b>{lim.current_teachers}</b>\n                    </td>\n                    <td className=\"border w-60\">\n                      <input\n                        type={\"number\"}\n                        className={`w-full p-2 bg-blue-50 hover:bg-blue-100 dark:hover:bg-primary-900 border-2 dark:bg-dark-900 ${\n                          this.state.error.target ===\n                          `input-${lim.qualification_id}`\n                            ? \"border-2 border-red-600\"\n                            : \"\"\n                        }`}\n                        value={lim.limits}\n                        onChange={(e) =>\n                          this.onChangeData(\n                            lim.qualification_id,\n                            e.target.value\n                          )\n                        }\n                        disabled={this.state.loading}\n                      />\n                      {this.state.error.target ===\n                        `input-${lim.qualification_id}` && (\n                        <p className=\"text-red-700 text-sm\">\n                          {this.state.error.msg}\n                        </p>\n                      )}\n                    </td>\n                    <td className=\"border p-2\">\n                      <b>{+lim.current_teachers + +lim.limits}</b>\n                    </td>\n                  </tr>\n                ))}\n\n                <tr className=\"\">\n                  <td colSpan={3} className=\"p-1 text-right pt-2\"></td>\n                  <td className=\"pt-2\">\n                    <Button\n                      full\n                      onClick={this.SendData}\n                      loading={this.state.loading}\n                    >\n                      Save changes\n                    </Button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n      </DashboardContainer>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  basic,\n}: StoreState): { auth: Auth; basic: Basic } => {\n  return { auth: auth, basic: basic };\n};\n\nexport const PostLimitsNational = connect(mapStateToProps, {\n  FC_GetPosyLimit,\n  FC_SavePostLimit,\n})(_NewComponent);\n"],"sourceRoot":""}